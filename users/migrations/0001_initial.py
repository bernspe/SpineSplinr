# Generated by Django 3.1.7 on 2021-04-01 12:26

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import users.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('sex', models.CharField(blank=True, max_length=1, null=True, verbose_name='sex')),
                ('username', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True, verbose_name='username')),
                ('postal_address', models.CharField(blank=True, max_length=100, verbose_name='address')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('expires', models.DateTimeField(default=users.models.get_default_expiry)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_emailvalidated', models.BooleanField(default=False)),
                ('proofstatus', models.CharField(blank=True, choices=[('INVITED', 'INVITED'), ('NONPROVEN', 'NONPROVEN'), ('VALIDATED', 'VALIDATED')], max_length=20, null=True)),
                ('instruction_level', models.CharField(blank=True, max_length=30, verbose_name='instruction level')),
                ('document', models.FileField(default='default_user.md', upload_to=users.models.get_user_document_path)),
                ('emailtoken', models.CharField(blank=True, max_length=6, verbose_name='email token')),
                ('dependent_children', models.ManyToManyField(blank=True, related_name='caregiver', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Userrole',
            fields=[
                ('role', models.CharField(max_length=30, primary_key=True, serialize=False, unique=True)),
                ('translations', models.JSONField(blank=True, null=True)),
                ('category', models.CharField(blank=True, max_length=30, null=True)),
                ('proof', models.CharField(blank=True, max_length=30, null=True)),
                ('consents', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProof',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('proof_type', models.CharField(blank=True, max_length=30, null=True)),
                ('img', models.ImageField(blank=True, null=True, upload_to=users.models.id_jpgname)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('checkedby', models.ForeignKey(blank=True, null=True, on_delete=models.SET(users.models.get_sentinel_user), related_name='userproofchecked', to=settings.AUTH_USER_MODEL)),
                ('referring_User', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='cost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost_date', models.DateTimeField(auto_now_add=True, verbose_name='cost date')),
                ('cost_type', models.CharField(choices=[('CALCULATION', 'CALCULATION'), ('MANUAL CORRECTION', 'MANUAL CORRECTION'), ('MISC', 'MISC')], max_length=30)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=7)),
                ('add_info', models.CharField(blank=True, max_length=100, verbose_name='additional information')),
                ('referring_User', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='contribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contribution_date', models.DateTimeField(auto_now_add=True, verbose_name='contribution date')),
                ('contribution_type', models.CharField(choices=[('MONEY_DONATION', 'MONEY_DONATION'), ('MONEY_PAYMENT', 'MONEY_PAYMENT'), ('TIME', 'TIME'), ('DATA', 'DATA'), ('CONTACTS', 'CONTACTS'), ('MISC', 'MISC')], max_length=30)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=7)),
                ('add_info', models.CharField(blank=True, max_length=100, verbose_name='additional information')),
                ('validated', models.BooleanField(default=False)),
                ('referring_User', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ConsentContent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('consent_type', models.CharField(max_length=30)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('document', models.FileField(default='default.md', upload_to=users.models.get_consent_document_path)),
                ('add_info', models.CharField(blank=True, max_length=100, verbose_name='additional information')),
                ('createdby', models.ForeignKey(blank=True, null=True, on_delete=models.SET(users.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='consent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('consent_date', models.DateTimeField(auto_now_add=True, verbose_name='consent date')),
                ('withdraw_date', models.DateTimeField(blank=True, null=True, verbose_name='withdraw date')),
                ('consent_content', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='users.consentcontent')),
                ('involved_users', models.ManyToManyField(blank=True, related_name='consenttarget', to=settings.AUTH_USER_MODEL)),
                ('referring_User', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(blank=True, related_name='userrole', to='users.Userrole'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='users_user_usernam_65d164_idx'),
        ),
    ]
