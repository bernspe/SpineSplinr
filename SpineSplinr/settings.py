"""
Django settings for SpineSplinr project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys

from environs import Env
import rest_framework

import logging.config

from MLModelManager.mlhelpers import getMLWorkflow

env = Env()
env.read_env()
SECRET_KEY = env('DJANGO_SECRET_KEY')
VERSION = env('APP_VERSION')
BUILD_DATE=env('APP_BUILD_DATE')
DEFAULT_USER_PASSWORD=env('DEFAULT_USER_PASSWORD')
DEFAULT_EXPIRY=100 #days
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
APP_ENV=env('APP_ENV')
if APP_ENV=='production':
    DEBUG = False
    BASE_URL = env('BASE_URL_DEPLOY')
    FRONT_END_URL=env('FRONT_END_URL_DEPLOY')
else:
    DEBUG=True
    BASE_URL = env('BASE_URL_LOCAL')
    FRONT_END_URL = env('FRONT_END_URL_LOCAL')

INVITED_USER_URL=FRONT_END_URL+env('FRONT_END_INVITED_USER_ACCESS_SUFFIX')
# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'oauth2_provider',
  #  'social_django',
  #  'rest_social_auth',
  #  'rest_framework_social_oauth2',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'guardian',
#    'auditlog',
#    'django_celery_results',
    'django_celery_beat',
    'users',
    'splineapp',
    'caserooms',
    'MLModelManager',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
   # 'whitenoise.middleware.WhiteNoiseMiddleware',
  #  'social_django.middleware.SocialAuthExceptionMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
#    'auditlog.middleware.AuditlogMiddleware',

    'django.contrib.auth.middleware.RemoteUserMiddleware',
]

AUTH_USER_MODEL='users.User'
#SOCIAL_AUTH_USER_MODEL = 'users.User'
GUARDIAN_MONKEY_PATCH = False

AUTHENTICATION_BACKENDS = (
#    'social_core.backends.google.GoogleOAuth2',
#    'social_core.backends.facebook.FacebookAppOAuth2',
#    'social_core.backends.facebook.FacebookOAuth2',
#    'social_core.backends.github.GithubOAuth2',
#    'rest_framework_social_oauth2.backends.DjangoOAuth2',
    'oauth2_provider.backends.OAuth2Backend',
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',

    'django.contrib.auth.backends.RemoteUserBackend',
)
#SOCIAL_AUTH_POSTGRES_JSONFIELD = True

#SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env('GOOGLE_OAUTH2_KEY')
#SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env('GOOGLE_OAUTH2_SECRET')
#SOCIAL_AUTH_GOOGLE_OAUTH2_FIELDS = ['email', 'username']  # optional

#Probleme beim Einloggen sind a.e. durch das restframework social auth bedingt
#SOCIAL_AUTH_FACEBOOK_KEY = env('FACEBOOK_KEY')
#SOCIAL_AUTH_FACEBOOK_SECRET = env('FACEBOOK_SECRET')
#SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
#SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
#    'fields': 'id, name, email'
#}

#SOCIAL_AUTH_GITHUB_KEY = env('GITHUB_KEY')
#SOCIAL_AUTH_GITHUB_SECRET = env('GITHUB_SECRET')
#SOCIAL_AUTH_GITHUB_ACCESS_TOKEN_METHOD = 'GET'

#SOCIAL_AUTH_RAISE_EXCEPTIONS = True
#SOCIAL_AUTH_SLUGIFY_USERNAMES = True
#SOCIAL_AUTH_URL_NAMESPACE = 'social'
#SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['https://www.googleapis.com/auth/userinfo.email','https://www.googleapis.com/auth/userinfo.profile']
# config per http://psa.matiasaguirre.net/docs/configuration/django.html#django-admin
#SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']


#SOCIAL_AUTH_PIPELINE = (
#  'social_core.pipeline.social_auth.social_details',
#  'social_core.pipeline.social_auth.social_uid',
#  'social_core.pipeline.social_auth.auth_allowed',
#  'social_core.pipeline.social_auth.social_user',
#  'social_core.pipeline.user.get_username',
#  'social_core.pipeline.social_auth.associate_by_email', # not secure
#  'social_core.pipeline.user.create_user',
#  'social_core.pipeline.social_auth.associate_user',
#  'social_core.pipeline.social_auth.load_extra_data',
#  'social_core.pipeline.user.user_details',
#)

LOGIN_URL='/admin/login/'
LOGIN_REDIRECT_URL = '/'

ROOT_URLCONF = 'SpineSplinr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
       #         'social_django.context_processors.backends',
       #         'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'SpineSplinr.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
            'OPTIONS': {
                'timeout': 60, #handling concurrency
            }
        }
    }

else:
    DATABASES = {

        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env('POSTGRES_DB'),
            'USER': env('POSTGRES_USER'),
            'PASSWORD': env('POSTGRES_PASSWORD'),
            'HOST': 'db',
            'PORT': '5432',
        },
        'local': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }

    }

FILE_UPLOAD_HANDLERS= ["django.core.files.uploadhandler.TemporaryFileUploadHandler"]


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_ROOT=os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'


if APP_ENV=='production':
    CELERY_BROKER_URL = 'redis://redis:6379/0'
    CELERY_RESULT_BACKEND = 'redis://redis:6379'
    #CELERY_RESULT_BACKEND = 'django-db'
else:
    BROKER_URL = 'redis://localhost:6379'
    CELERY_BROKER_URL = 'redis://localhost:6379'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379'
    #CELERY_RESULT_BACKEND = 'django-db'

CELERY_accept_content = ['application/json']
CELERY_task_serializer = 'json'
CELERY_result_serializer = 'json'
CELERY_enable_utc = True
CELERY_timezone = 'Europe/Berlin'

#GMail Settings
EMAIL_ACCOUNT_NAME=env('EMAIL_ACCOUNT_NAME')
EMAIL_ACCOUNT_KEY=env('EMAIL_ACCOUNT_KEY')

#Mail settings for Django Mail Backend
EMAIL_HOST_USER=EMAIL_ACCOUNT_NAME
EMAIL_HOST_PASSWORD=EMAIL_ACCOUNT_KEY

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

#Caseroom settings
HELPDESK_NAME=env('HELPDESK_CR_NAME')

GEN_STAFF_USER= {'first_name': env('GEN_STAFF_USER_FIRSTNAME'), 'last_name': env('GEN_STAFF_USER_LASTNAME'),'username': env('GEN_STAFF_USER_USERNAME'), 'email':env('EMAIL_ACCOUNT_NAME'), 'password':env('GEN_STAFF_USER_PASSWORD'), 'is_staff': True}

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups', 'splineapp':'Access to the splineapp list'}
}


REFRESH_TOKEN_EXPIRE_SECONDS=400000

REST_FRAMEWORK = {
  'DEFAULT_AUTHENTICATION_CLASSES': (
    #    'rest_framework.authentication.SessionAuthentication',
   #     'rest_framework.authentication.TokenAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
   ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    )
}

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL_PROTECTED = '/mediaprotected/'
MEDIA_ROOT_PROTECTED = os.path.join(BASE_DIR, 'mediaprotected')
SPLINEAPP_ROOT=os.path.join(MEDIA_ROOT, 'splineapp')

USER_INVITATION_DIR=os.path.join(BASE_DIR,'media/userinvitations')

#registering DL Models
MLMODEL_DIR=os.path.join(MEDIA_ROOT, 'mlmodels')
MLMODEL_URL=MEDIA_URL+'mlmodels/'
MLWORKFLOW=getMLWorkflow('initialdata/splineapp_workflow.xls')
MLMODEL_IMG_SIZE=512

FILE_UPLOAD_DIRECTORY_PERMISSIONS=0o777
#XRModelName='vertebrae_detection_model.pkl'
#UprightModelName='waist_line_model.pkl'
#BendModelName='humb_line_model.pkl'
#XRAY_MODEL_PATH = os.path.join(BASE_DIR, 'DL_MODELS/'+XRModelName)
#UPRIGHT_MODEL_PATH=os.path.join(BASE_DIR, 'DL_MODELS/'+UprightModelName)
#BEND=MODEL_PATH=os.path.join(BASE_DIR, 'DL_MODELS/'+BendModelName)
sys.path.insert(0, os.path.join(BASE_DIR, 'splineapp/dl_detektor'))

SPINEPLINE_SUPERVISOR=env('SPINEPLINE_SUPERVISOR')

FONT_ROOT = os.path.join(BASE_DIR, 'fonts')
FONT_FILE_SPLINE = FONT_ROOT+"/acmesa.ttf"

ALLOWED_HOSTS = ['*']

from corsheaders.defaults import default_headers
CORS_ALLOW_HEADERS = list(default_headers) + [
    'cache-control','Access-Control-Allow-Origin','Access-Control-Expose-Headers','Invited-Username','sentry-trace'
]
CORS_EXPOSE_HEADERS = ['Invited-Username']
#set to false upon deployment
CORS_ORIGIN_ALLOW_ALL=True
CORS_ALLOW_ALL_ORIGINS=True
CORS_ALLOW_CREDENTIALS=True
CORS_ORIGIN_WHITELIST=[
    'http://localhost:8080',
    'http://skoliosekinder.de:8888',
    'https://skoliosekinder.de:8888',
    'https://skoliosekinder.de',
    'https://api.skoliosekinder.de',
    'http://api.skoliosekinder.de',
]
CORS_ORIGIN_REGEX_WHITELIST=[
    r"^http://\w+\.skoliosekinder\.de$",
    r"^https://\w+\.skoliosekinder\.de$"

]

APPEND_SLASH=False

LOGGING={
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
        'class': 'logging.StreamHandler',},
    },
    'loggers':{
        '':{
            'handlers': ['console'],
            'level': 'DEBUG',
        }
    }
    }

logging.config.dictConfig(LOGGING)

if APP_ENV=='production':
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.tornado import TornadoIntegration

    sentry_sdk.init(
        dsn=env('SENTRYDSN'),
        integrations=[DjangoIntegration(),CeleryIntegration(),TornadoIntegration()],

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True
    )

SWAGGER_SETTINGS = {
   'USE_SESSION_AUTH': False,
   'SECURITY_DEFINITIONS': {
      'SpineSplinrAPI - Swagger': {
         'type': 'oauth2',
         'authorizationUrl': FRONT_END_URL+'login/',
         'tokenUrl': BASE_URL+'o/emailtoken/',
         'flow': 'password',
         'scopes': {
          'read:groups': 'read groups',
         }
      },
   },
   'OAUTH2_CONFIG': {
      'clientId': env('CLIENT_ID'),
      'clientSecret': env('CLIENT_SECRET'),
      'appName': 'Splinr'
   },
}

# Channels Settings
ASGI_APPLICATION = 'SpineSplinr.routing.application'

if APP_ENV=='production':
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": ['redis://redis:6379'],
            },
        },
    }
else:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [('127.0.0.1',6379)],
            },
        },
    }


AUTH0_DOMAIN = env('AUTH0_DOMAIN')
API_IDENTIFIER = env('API_IDENTIFIER')
PUBLIC_KEY = None
JWT_ISSUER = None

if AUTH0_DOMAIN:
    JWT_ISSUER = 'https://' + AUTH0_DOMAIN + '/'

JWT_AUTH = {
    'JWT_PAYLOAD_GET_USERNAME_HANDLER':
        'auth0authorization.utils.jwt_get_username_from_payload_handler',
    'JWT_DECODE_HANDLER':
        'auth0authorization.utils.jwt_decode_token',
    'JWT_ALGORITHM': 'RS256',
    'JWT_AUDIENCE': API_IDENTIFIER,
    'JWT_ISSUER': JWT_ISSUER,
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}
